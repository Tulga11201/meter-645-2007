#ifndef MEM_CFG_H
#define MEM_CFG_H

#define MEM_TEST_BYTES 10L
//物理存储器定义
#define PHY_MEM0 0 //512 EEROM
#define PHY_MEM1 1 //32K EEROM
#define PHY_MEM2 2 //32K EEROM
#define PHY_MEM3 3 //32K EEROM
#define PHY_MEM4 4 //8K FRAM
#define PHY_MEM5 5 //2M FLASH

#define PHY_MEM0_SIZE (512L-MEM_TEST_BYTES)
#define PHY_MEM1_SIZE (64*1024L-MEM_TEST_BYTES)
#define PHY_MEM2_SIZE (64*1024L-MEM_TEST_BYTES)
#define PHY_MEM3_SIZE (64*1024L-MEM_TEST_BYTES)
#define PHY_MEM4_SIZE (2*1024L-MEM_TEST_BYTES)
#define PHY_MEM5_SIZE (2162688L-MEM_TEST_BYTES)
/*
//定义各种数据的存储分布
CONST S_Data_Mem_Map Data_Mem_Map[] = 
{
{IMP_FAC_PARA    , {LOG_MEM0, LOG_MEM1, LOG_MEM2, LOG_MEM3, LOG_MEM4}}, //工厂参数,5份存储
{IMP_IMP_PARA    , {LOG_MEM5, LOG_MEM6, LOG_MEM7, LOG_MEM8, NULL_LOG_MEM}}, //重要参数,4份
{IMP_NOR_PARA    , {LOG_MEM9, LOG_MEM10, LOG_MEM11, NULL_LOG_MEM, NULL_LOG_MEM}}, //普通参数,3份
{IMP_IMP_DATA    , {LOG_MEM12, LOG_MEM13, LOG_MEM14, LOG_MEM15, NULL_LOG_MEM}}, //重要数据
{IMP_IMP_BAK_DATA, {LOG_MEM16, LOG_MEM17, LOG_MEM18, NULL_LOG_MEM, NULL_LOG_MEM}}, //重要数据的备份
{IMP_NOR_DATA    , {LOG_MEM19, LOG_MEM20, LOG_MEM21, NULL_LOG_MEM, NULL_LOG_MEM}}, //普通数据
{IMP_HIS_DATA    , {LOG_MEM22, LOG_MEM23, LOG_MEM24, NULL_LOG_MEM, NULL_LOG_MEM}}, //历史数据
{IMP_EVENT_CUMU  , {LOG_MEM25, LOG_MEM26, LOG_MEM27, NULL_LOG_MEM, NULL_LOG_MEM}}, //事件累计信息
{IMP_EVENT0    , {LOG_MEM28, LOG_MEM29, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //第0类事件
{IMP_EVENT1    , {LOG_MEM30, LOG_MEM31, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //第1类事件
{IMP_EVENT2    , {LOG_MEM32, LOG_MEM33, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //第2类事件
{IMP_LOAD_REC    , {LOG_MEM34, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //事件记录
{IMP_PD_DATA   , {LOG_MEM35, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}} //掉电数据
}; 
*/

#define IMP0_DATA_SIZE 100L    //工厂参数          
#define IMP1_DATA_SIZE 3200L   //重要参数          
#define IMP2_DATA_SIZE 0L    //普通参数          
#define IMP3_DATA_SIZE 2400L   //重要数据          
#define IMP4_DATA_SIZE 3500L   //重要数据的备份          
#define IMP5_DATA_SIZE 0L    //普通数据          
#define IMP6_DATA_SIZE 27000L  //历史数据          
#define IMP7_DATA_SIZE 5000L   //事件累计信息          
#define IMP8_DATA_SIZE 14000L  //第0类事件，不频繁，与数据混存       
#define IMP9_DATA_SIZE 59500L  //第1类事件，数据量大且频繁，存独立EEROM    
#define IMPA_DATA_SIZE 20000L  //第2类事件，数据量大，但是不频繁，一般存Flash  
#define IMPB_DATA_SIZE (PHY_MEM5_SIZE - 4000)    //负荷或冻结记录，存Flash           
#define IMPC_DATA_SIZE 1600L   //掉电存储数据，存FRAM  

//逻辑存储器定义，每个逻辑存储器都在一个物理存储器的一片连续空间上
#define NULL_LOG_MEM 0xFF//定义一个不存在的存储器 
////////////////////////////////////////
//#define IMP_FAC_PARA    IMP_0 //工厂参数 
#if IMP0_DATA_SIZE > 0
#define LOG_MEM0 0
#define LOG_MEM1 1
#define LOG_MEM2 2
#define LOG_MEM3 3
#define LOG_MEM4 4
#else
#define LOG_MEM0 NULL_LOG_MEM
#define LOG_MEM1 NULL_LOG_MEM
#define LOG_MEM2 NULL_LOG_MEM
#define LOG_MEM3 NULL_LOG_MEM
#define LOG_MEM4 NULL_LOG_MEM
#endif

#if LOG_MEM0!=NULL_LOG_MEM
#define LOG_MEM0_SIZE IMP0_DATA_SIZE
#else
#define LOG_MEM0_SIZE 0
#endif

#if LOG_MEM1!=NULL_LOG_MEM
#define LOG_MEM1_SIZE IMP0_DATA_SIZE
#else
#define LOG_MEM1_SIZE 0
#endif

#if LOG_MEM2!=NULL_LOG_MEM
#define LOG_MEM2_SIZE IMP0_DATA_SIZE
#else
#define LOG_MEM2_SIZE 0
#endif

#if LOG_MEM3!=NULL_LOG_MEM
#define LOG_MEM3_SIZE IMP0_DATA_SIZE
#else
#define LOG_MEM3_SIZE 0
#endif

#if LOG_MEM4!=NULL_LOG_MEM
#define LOG_MEM4_SIZE IMP0_DATA_SIZE
#else
#define LOG_MEM4_SIZE 0
#endif

///////////////////////////////////
//#define IMP_IMP_PARA    IMP_1 //重要参数
#if IMP1_DATA_SIZE > 0
#define LOG_MEM5 5
#define LOG_MEM6 6
#define LOG_MEM7 7
#define LOG_MEM8 8
#define LOG_MEM36 36
#else
#define LOG_MEM5 NULL_LOG_MEM
#define LOG_MEM6 NULL_LOG_MEM
#define LOG_MEM7 NULL_LOG_MEM
#define LOG_MEM8 NULL_LOG_MEM
#define LOG_MEM36 NULL_LOG_MEM
#endif

#if LOG_MEM5!=NULL_LOG_MEM
#define LOG_MEM5_SIZE IMP1_DATA_SIZE
#else
#define LOG_MEM5_SIZE 0
#endif

#if LOG_MEM6!=NULL_LOG_MEM
#define LOG_MEM6_SIZE IMP1_DATA_SIZE
#else
#define LOG_MEM6_SIZE 0
#endif

#if LOG_MEM7!=NULL_LOG_MEM
#define LOG_MEM7_SIZE IMP1_DATA_SIZE
#else
#define LOG_MEM7_SIZE 0
#endif

#if LOG_MEM8!=NULL_LOG_MEM
#define LOG_MEM8_SIZE IMP1_DATA_SIZE
#else
#define LOG_MEM8_SIZE 0
#endif

#if LOG_MEM36!=NULL_LOG_MEM
#define LOG_MEM36_SIZE IMP1_DATA_SIZE
#else
#define LOG_MEM36_SIZE 0
#endif

//#define IMP_NOR_PARA    IMP_2 //普通参数
#if IMP2_DATA_SIZE > 0
#define LOG_MEM9 9
#define LOG_MEM10 10
#define LOG_MEM11 11
#else
#define LOG_MEM9  NULL_LOG_MEM
#define LOG_MEM10 NULL_LOG_MEM
#define LOG_MEM11 NULL_LOG_MEM
#endif

#if LOG_MEM9!=NULL_LOG_MEM
#define LOG_MEM9_SIZE IMP2_DATA_SIZE
#else
#define LOG_MEM9_SIZE 0
#endif

#if LOG_MEM10!=NULL_LOG_MEM
#define LOG_MEM10_SIZE IMP2_DATA_SIZE
#else
#define LOG_MEM10_SIZE 0
#endif

#if LOG_MEM11!=NULL_LOG_MEM
#define LOG_MEM11_SIZE IMP2_DATA_SIZE
#else
#define LOG_MEM11_SIZE 0
#endif

//#define IMP_IMP_DATA    IMP_3 //重要数据
#if IMP3_DATA_SIZE > 0
#define LOG_MEM12 12
#define LOG_MEM13 13
#define LOG_MEM14 14
#define LOG_MEM15 NULL_LOG_MEM
#else
#define LOG_MEM12 NULL_LOG_MEM
#define LOG_MEM13 NULL_LOG_MEM
#define LOG_MEM14 NULL_LOG_MEM
#define LOG_MEM15 NULL_LOG_MEM
#endif

#if LOG_MEM12!=NULL_LOG_MEM
#define LOG_MEM12_SIZE IMP3_DATA_SIZE
#else
#define LOG_MEM12_SIZE 0
#endif

#if LOG_MEM13!=NULL_LOG_MEM
#define LOG_MEM13_SIZE IMP3_DATA_SIZE
#else
#define LOG_MEM13_SIZE 0
#endif

#if LOG_MEM14!=NULL_LOG_MEM
#define LOG_MEM14_SIZE IMP3_DATA_SIZE
#else
#define LOG_MEM14_SIZE 0
#endif

#if LOG_MEM15!=NULL_LOG_MEM
#define LOG_MEM15_SIZE IMP3_DATA_SIZE
#else
#define LOG_MEM15_SIZE 0
#endif

//#define IMP_IMP_BAK_DATA  IMP_4 //重要数据的备份
#if IMP4_DATA_SIZE > 0
#define LOG_MEM16 16
#define LOG_MEM17 17
#define LOG_MEM18 18
#else
#define LOG_MEM16 NULL_LOG_MEM
#define LOG_MEM17 NULL_LOG_MEM
#define LOG_MEM18 NULL_LOG_MEM
#endif

#if LOG_MEM16!=NULL_LOG_MEM
#define LOG_MEM16_SIZE IMP4_DATA_SIZE
#else
#define LOG_MEM16_SIZE 0
#endif

#if LOG_MEM17!=NULL_LOG_MEM
#define LOG_MEM17_SIZE IMP4_DATA_SIZE
#else
#define LOG_MEM17_SIZE 0
#endif

#if LOG_MEM18!=NULL_LOG_MEM
#define LOG_MEM18_SIZE IMP4_DATA_SIZE
#else
#define LOG_MEM18_SIZE 0
#endif

//#define IMP_NOR_DATA  IMP_5 //普通数据
#if IMP5_DATA_SIZE
#define LOG_MEM19 19
#define LOG_MEM20 20
#define LOG_MEM21 21
#else
#define LOG_MEM19 NULL_LOG_MEM
#define LOG_MEM20 NULL_LOG_MEM
#define LOG_MEM21 NULL_LOG_MEM
#endif

#if LOG_MEM19!=NULL_LOG_MEM
#define LOG_MEM19_SIZE IMP5_DATA_SIZE
#else
#define LOG_MEM19_SIZE 0
#endif

#if LOG_MEM20!=NULL_LOG_MEM
#define LOG_MEM20_SIZE IMP5_DATA_SIZE
#else
#define LOG_MEM20_SIZE 0
#endif

#if LOG_MEM21!=NULL_LOG_MEM
#define LOG_MEM21_SIZE IMP5_DATA_SIZE
#else
#define LOG_MEM21_SIZE 0
#endif

//#define IMP_HIS_DATA  IMP_6 //历史数据
#if IMP6_DATA_SIZE > 0
#define LOG_MEM22 22
#define LOG_MEM23 23
#define LOG_MEM24 NULL_LOG_MEM
#else
#define LOG_MEM22 NULL_LOG_MEM
#define LOG_MEM23 NULL_LOG_MEM
#define LOG_MEM24 NULL_LOG_MEM
#endif

#if LOG_MEM22!=NULL_LOG_MEM
#define LOG_MEM22_SIZE IMP6_DATA_SIZE
#else
#define LOG_MEM22_SIZE 0
#endif

#if LOG_MEM23!=NULL_LOG_MEM
#define LOG_MEM23_SIZE IMP6_DATA_SIZE
#else
#define LOG_MEM23_SIZE 0
#endif

#if LOG_MEM24!=NULL_LOG_MEM
#define LOG_MEM24_SIZE IMP6_DATA_SIZE
#else
#define LOG_MEM24_SIZE 0
#endif

//#define IMP_EVENT_CUMU IMP_7 //事件累计
#if IMP7_DATA_SIZE > 0
#define LOG_MEM25 25
#define LOG_MEM26 NULL_LOG_MEM
#define LOG_MEM27 27
#else
#define LOG_MEM25 NULL_LOG_MEM
#define LOG_MEM26 NULL_LOG_MEM
#define LOG_MEM27 NULL_LOG_MEM
#endif


#if LOG_MEM25!=NULL_LOG_MEM
#define LOG_MEM25_SIZE IMP7_DATA_SIZE
#else
#define LOG_MEM25_SIZE 0
#endif

#if LOG_MEM26!=NULL_LOG_MEM
#define LOG_MEM26_SIZE IMP7_DATA_SIZE
#else
#define LOG_MEM26_SIZE 0
#endif

#if LOG_MEM27!=NULL_LOG_MEM
#define LOG_MEM27_SIZE IMP7_DATA_SIZE
#else
#define LOG_MEM27_SIZE 0
#endif

//#define IMP_EVENT0 IMP_8 //第0类事件
#if IMP8_DATA_SIZE > 0
#define LOG_MEM28 28
#define LOG_MEM29 NULL_LOG_MEM
#else
#define LOG_MEM28 NULL_LOG_MEM
#define LOG_MEM29 NULL_LOG_MEM
#endif

#if LOG_MEM28!=NULL_LOG_MEM
#define LOG_MEM28_SIZE IMP8_DATA_SIZE
#else
#define LOG_MEM28_SIZE 0
#endif

#if LOG_MEM29!=NULL_LOG_MEM
#define LOG_MEM29_SIZE IMP8_DATA_SIZE
#else
#define LOG_MEM29_SIZE 0
#endif

//#define IMP_EVENT1 IMP_9 //第1类事件
#if IMP9_DATA_SIZE > 0 
#define LOG_MEM30 30
#define LOG_MEM31 NULL_LOG_MEM
#else
#define LOG_MEM30 NULL_LOG_MEM
#define LOG_MEM31 NULL_LOG_MEM
#endif

#if LOG_MEM30!=NULL_LOG_MEM
#define LOG_MEM30_SIZE IMP9_DATA_SIZE
#else
#define LOG_MEM30_SIZE 0
#endif

#if LOG_MEM31!=NULL_LOG_MEM
#define LOG_MEM31_SIZE IMP9_DATA_SIZE
#else
#define LOG_MEM31_SIZE 0
#endif

//#define IMP_EVENT2 IMP_A//第2类事件
#if IMPA_DATA_SIZE > 0
#define LOG_MEM32 32
#define LOG_MEM33 NULL_LOG_MEM
#else
#define LOG_MEM32 NULL_LOG_MEM
#define LOG_MEM33 NULL_LOG_MEM
#endif

#if LOG_MEM32!=NULL_LOG_MEM
#define LOG_MEM32_SIZE IMPA_DATA_SIZE
#else
#define LOG_MEM32_SIZE 0
#endif

#if LOG_MEM33!=NULL_LOG_MEM
#define LOG_MEM33_SIZE IMPA_DATA_SIZE
#else
#define LOG_MEM33_SIZE 0
#endif

//#define IMP_LOAD_REC IMP_B//负荷曲线
#if IMPB_DATA_SIZE > 0
#define LOG_MEM34 34
#else
#define LOG_MEM34 NULL_LOG_MEM
#endif

#if LOG_MEM34!=NULL_LOG_MEM
#define LOG_MEM34_SIZE IMPB_DATA_SIZE
#else
#define LOG_MEM34_SIZE 0
#endif

//#define IMP_PD_DATA IMP_C//掉电数据
#if IMPC_DATA_SIZE > 0
#define LOG_MEM35 35
#else
#define LOG_MEM35 NULL_LOG_MEM
#endif

#if LOG_MEM35!=NULL_LOG_MEM
#define LOG_MEM35_SIZE IMPC_DATA_SIZE
#else
#define LOG_MEM35_SIZE 0
#endif
/*
//定义各种数据的存储分布
CONST S_Data_Mem_Map Data_Mem_Map[] = 
{
  {IMP_FAC_PARA    , {LOG_MEM0, LOG_MEM1, LOG_MEM2, LOG_MEM3, LOG_MEM4}}, //工厂参数,5份存储
  {IMP_IMP_PARA    , {LOG_MEM5, LOG_MEM6, LOG_MEM7, LOG_MEM8, NULL_LOG_MEM}}, //重要参数,4份
  {IMP_NOR_PARA    , {LOG_MEM9, LOG_MEM10, LOG_MEM11, NULL_LOG_MEM, NULL_LOG_MEM}}, //普通参数,3份
  {IMP_IMP_DATA    , {LOG_MEM12, LOG_MEM13, LOG_MEM14, LOG_MEM15, NULL_LOG_MEM}}, //重要数据
  {IMP_IMP_BAK_DATA, {LOG_MEM16, LOG_MEM17, LOG_MEM18, NULL_LOG_MEM, NULL_LOG_MEM}}, //重要数据的备份
  {IMP_NOR_DATA    , {LOG_MEM19, LOG_MEM20, LOG_MEM21, NULL_LOG_MEM, NULL_LOG_MEM}}, //普通数据
  {IMP_HIS_DATA    , {LOG_MEM22, LOG_MEM23, LOG_MEM24, NULL_LOG_MEM, NULL_LOG_MEM}}, //历史数据
  {IMP_EVENT_CUMU  , {LOG_MEM25, LOG_MEM26, LOG_MEM27, NULL_LOG_MEM, NULL_LOG_MEM}}, //事件累计信息
  {IMP_EVENT0      , {LOG_MEM28, LOG_MEM29, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //第0类事件
  {IMP_EVENT1      , {LOG_MEM30, LOG_MEM31, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //第1类事件
  {IMP_EVENT2      , {LOG_MEM32, LOG_MEM33, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //第2类事件
  {IMP_LOAD_REC    , {LOG_MEM34, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}}, //事件记录
  {IMP_PD_DATA     , {LOG_MEM35, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM, NULL_LOG_MEM}} //掉电数据
};
*/ 
/************************以下是逻辑内存的配置信息**********************/
/*
---------
PHY_MEM0://主要存校表参数
LOG_MEM0(IMP_FAC_PARA)
LOG_MEM1(IMP_FAC_PARA)
---------
PHY_MEM1://主要存数据和参数
LOG_MEM2(IMP_FAC_PARA)
LOG_MEM5(IMP_IMP_PARA)
LOG_MEM12(IMP_IMP_DATA)
LOG_MEM6(IMP_IMP_PARA)
LOG_MEM16(IMP_IMP_BAK_DATA)
LOG_MEM13(IMP_IMP_DATA)
LOG_MEM17(IMP_IMP_BAK_DATA)
---------
PHY_MEM2://主要存数据和参数的备份
LOG_MEM3(IMP_FAC_PARA)
LOG_MEM7(IMP_IMP_PARA)
LOG_MEM14(IMP_IMP_DATA)
LOG_MEM18(IMP_IMP_BAK_DATA)
LOG_MEM28(IMP_EVENT0)
LOG_MEM29(IMP_EVENT0)
---------
PHY_MEM3://主要存事件
LOG_MEM4(IMP_FAC_PARA)
LOG_MEM25(IMP_EVENT_CUMU)
LOG_MEM30(IMP_EVENT1)
LOG_MEM31(IMP_EVENT1)
LOG_MEM26(IMP_EVENT_CUMU)
---------
PHY_MEM4://主要存掉电数据
LOG_MEM15(IMP_IMP_DATA)
LOG_MEM27(IMP_EVENT_CUMU)
LOG_MEM35(IMP_PD_DATA)
---------
PHY_MEM5://主要存负荷曲线
LOG_MEM8(IMP_IMP_PARA)
LOG_MEM22(IMP_HIS_DATA)
LOG_MEM23(IMP_HIS_DATA)
LOG_MEM24(IMP_HIS_DATA)
LOG_MEM32(IMP_EVENT2)
LOG_MEM33(IMP_EVENT2)
LOG_MEM34(IMP_LOAD_REC)

*/
//PHY_MEM0
#define LOG_MEM0_START 0
#define LOG_MEM1_START (LOG_MEM0_START+LOG_MEM0_SIZE)

//PHY_MEM1
#define LOG_MEM2_START  0
#define LOG_MEM5_START  (LOG_MEM2_START + LOG_MEM2_SIZE)
#define LOG_MEM12_START (LOG_MEM5_START + LOG_MEM5_SIZE)
#define LOG_MEM6_START  (LOG_MEM12_START + LOG_MEM12_SIZE)
#define LOG_MEM16_START (LOG_MEM6_START + LOG_MEM6_SIZE)
#define LOG_MEM13_START (LOG_MEM16_START + LOG_MEM16_SIZE)
#define LOG_MEM17_START (LOG_MEM13_START + LOG_MEM13_SIZE)
#define LOG_MEM22_START (LOG_MEM17_START + LOG_MEM17_SIZE)//历史数据
#define LOG_MEM32_START (LOG_MEM22_START + LOG_MEM22_SIZE)//IMP_EVENT2类事件

//PHY_MEM2
#define LOG_MEM3_START  0
#define LOG_MEM7_START  (LOG_MEM3_START + LOG_MEM3_SIZE)
#define LOG_MEM14_START (LOG_MEM7_START + LOG_MEM7_SIZE)
#define LOG_MEM18_START (LOG_MEM14_START + LOG_MEM14_SIZE)
#define LOG_MEM8_START  (LOG_MEM18_START + LOG_MEM18_SIZE)
#define LOG_MEM29_START (LOG_MEM8_START + LOG_MEM8_SIZE)
#define LOG_MEM23_START (LOG_MEM29_START + LOG_MEM29_SIZE)//历史数据
#define LOG_MEM25_START (LOG_MEM23_START + LOG_MEM23_SIZE)
#define LOG_MEM28_START (LOG_MEM25_START + LOG_MEM25_SIZE)

//PHY_MEM3
#define LOG_MEM4_START  0
#define LOG_MEM30_START (LOG_MEM4_START + LOG_MEM4_SIZE)
#define LOG_MEM31_START (LOG_MEM30_START + LOG_MEM30_SIZE)
#define LOG_MEM26_START (LOG_MEM31_START + LOG_MEM31_SIZE)
#define LOG_MEM27_START (LOG_MEM26_START + LOG_MEM26_SIZE)


//PHY_MEM4
#define LOG_MEM15_START 0
#define LOG_MEM35_START (LOG_MEM15_START + LOG_MEM15_SIZE)

//PHY_MEM5
#define LOG_MEM33_START 0//(LOG_MEM8_START + LOG_MEM8_SIZE)
#define LOG_MEM36_START (LOG_MEM33_START + LOG_MEM33_SIZE)
#define LOG_MEM34_START (LOG_MEM36_START + LOG_MEM36_SIZE)

//其他未用的LOG_MEM
#define LOG_MEM9_START  0
#define LOG_MEM10_START 0
#define LOG_MEM11_START 0
#define LOG_MEM19_START 0
#define LOG_MEM20_START 0
#define LOG_MEM21_START 0
#define LOG_MEM24_START 0
/************************以上是逻辑内存的配置信息**********************/

//物理存储器信息
typedef struct
{
    INT8U MemNo;//物理存储器编号
    INT32U Mem_Addr;//存储器起始地址
    INT32U Mem_Size;//存储器长度
}S_PHY_Mem_Info;

//系统的逻辑存储信息
typedef struct
{
    INT8U LOG_MemNo;//逻辑存储器编号
    S_PHY_Mem_Info PHY_Mem_Info;//对应的物理存储器信息
}S_LOG_Mem_Info;

#ifdef SYS_MEMORY_C
//定义物理存储器信息
const S_PHY_Mem_Info Sys_PHY_Mem[] =
{
  {PHY_MEM0,0,PHY_MEM0_SIZE}, {PHY_MEM1,0,PHY_MEM1_SIZE}, {PHY_MEM2,0,PHY_MEM2_SIZE}, {PHY_MEM3,0,PHY_MEM3_SIZE}, {PHY_MEM4,0,PHY_MEM4_SIZE}, {PHY_MEM5,0,PHY_MEM5_SIZE}
};

//定义逻辑存储器信息,位于哪个物理存储器，及其在物理存储器中的起始位置和大小
const S_LOG_Mem_Info Sys_LOG_Mem[] =
{
  //PHY_MEM0中
  {LOG_MEM0,{PHY_MEM0,LOG_MEM0_START,LOG_MEM0_SIZE}},//
  {LOG_MEM1,{PHY_MEM0,LOG_MEM1_START,LOG_MEM1_SIZE}},
  //PHY_MEM1中
  {LOG_MEM2,{PHY_MEM1,LOG_MEM2_START,LOG_MEM2_SIZE}}, 
  {LOG_MEM5,{PHY_MEM1,LOG_MEM5_START,LOG_MEM5_SIZE}}, 
  {LOG_MEM12,{PHY_MEM1,LOG_MEM12_START,LOG_MEM12_SIZE}}, 
  {LOG_MEM6,{PHY_MEM1,LOG_MEM6_START,LOG_MEM6_SIZE}}, 
  {LOG_MEM16,{PHY_MEM1,LOG_MEM16_START,LOG_MEM16_SIZE}}, 
  {LOG_MEM13,{PHY_MEM1,LOG_MEM13_START,LOG_MEM13_SIZE}}, 
  {LOG_MEM17,{PHY_MEM1,LOG_MEM17_START,LOG_MEM17_SIZE}},
  {LOG_MEM22,{PHY_MEM1,LOG_MEM22_START,LOG_MEM22_SIZE}}, 
  {LOG_MEM32,{PHY_MEM1,LOG_MEM32_START,LOG_MEM32_SIZE}},   
  //PHY_MEM2中
  {LOG_MEM3,{PHY_MEM2,LOG_MEM3_START,LOG_MEM3_SIZE}}, 
  {LOG_MEM7,{PHY_MEM2,LOG_MEM7_START,LOG_MEM7_SIZE}}, 
  {LOG_MEM14,{PHY_MEM2,LOG_MEM14_START,LOG_MEM14_SIZE}}, 
  {LOG_MEM18,{PHY_MEM2,LOG_MEM18_START,LOG_MEM18_SIZE}}, 
  {LOG_MEM8,{PHY_MEM2,LOG_MEM8_START,LOG_MEM8_SIZE}}, 
  {LOG_MEM29,{PHY_MEM2,LOG_MEM29_START,LOG_MEM29_SIZE}},
  {LOG_MEM23,{PHY_MEM2,LOG_MEM23_START,LOG_MEM23_SIZE}},
  {LOG_MEM25,{PHY_MEM2,LOG_MEM25_START,LOG_MEM25_SIZE}},   
  {LOG_MEM28,{PHY_MEM2,LOG_MEM28_START,LOG_MEM28_SIZE}},   
 
  //PHY_MEM3中
  {LOG_MEM4,{PHY_MEM3,LOG_MEM4_START,LOG_MEM4_SIZE}}, 
  {LOG_MEM30,{PHY_MEM3,LOG_MEM30_START,LOG_MEM30_SIZE}}, 
  {LOG_MEM31,{PHY_MEM3,LOG_MEM31_START,LOG_MEM31_SIZE}}, 
  {LOG_MEM26,{PHY_MEM3,LOG_MEM26_START,LOG_MEM26_SIZE}},
  {LOG_MEM27,{PHY_MEM3,LOG_MEM27_START,LOG_MEM27_SIZE}}, 
  
  //PHY_MEM4中
  {LOG_MEM15,{PHY_MEM4,LOG_MEM15_START,LOG_MEM15_SIZE}}, 
  {LOG_MEM35,{PHY_MEM4,LOG_MEM35_START,LOG_MEM35_SIZE}},
  //PHY_MEM5中
  {LOG_MEM24,{PHY_MEM5,LOG_MEM24_START,LOG_MEM24_SIZE}}, 
  {LOG_MEM33,{PHY_MEM5,LOG_MEM33_START,LOG_MEM33_SIZE}}, 
  {LOG_MEM36,{PHY_MEM5,LOG_MEM36_START,LOG_MEM36_SIZE}},   
  {LOG_MEM34,{PHY_MEM5,LOG_MEM34_START,LOG_MEM34_SIZE}}, 
};

//注意：Sys_PHY_Mem和Sys_LOG_Mem两个变量相当于是系统存储器的配置
//一旦系统的物理存储结构发生变化，则需要修改Sys_PHY_Mem和Sys_LOG_Mem两个变量
//如果修改后的存储分布大小不能满足存储的要求，则可能需要修改Data_Mem_Map变量
#endif
#endif

